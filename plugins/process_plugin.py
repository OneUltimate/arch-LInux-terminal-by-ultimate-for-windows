from .terminal_plugin import Plugin
import psutil
import platform
import os 

class ProcessPlugin(Plugin):
    def __init__(self, terminal):
        super().__init__(terminal)
        self.register_command("ps", "–°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤", self.handle_ps)
        self.register_command("kill", "–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å", self.handle_kill)
        
    def setup(self):
        pass

    def handle_ps(self, command: str):
        
        try:
            processes = []
            for proc in psutil.process_iter(['pid', 'name', 'username']):
                try:
                    processes.append(proc.info)
                except psutil.NoSuchProcess:
                    continue
            
           
            processes.sort(key=lambda p: p['name'].lower())
            
            self.terminal.add_line("üîÑ –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ (PID - –ò–º—è - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å):", 'highlight')
            for p in processes[:20]:
                self.terminal.add_line(f"{p['pid']} - {p['name']} - {p['username']}", 'normal')
            
            self.terminal.add_line(f"\n–í—Å–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {len(processes)}", 'highlight')
            
        except Exception as e:
            self.terminal.add_line(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", 'highlight')
        finally:
            self.terminal.show_prompt()

    def handle_kill(self, command: str):
        parts = command.split()
        if len(parts) < 2:
            self.terminal.add_line("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: kill <PID –∏–ª–∏ –∏–º—è>", 'highlight')
            return
            
        target = parts[1]
        try:
            if target.isdigit():  # –ï—Å–ª–∏ –≤–≤–µ–ª–∏ PID
                pid = int(target)
                if platform.system() == "Windows":
                    os.system(f"taskkill /pid {pid} /f")
                else:
                    os.kill(pid, 9)
            else:  # –ï—Å–ª–∏ –≤–≤–µ–ª–∏ –∏–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞
                if platform.system() == "Windows":
                    os.system(f"taskkill /im {target} /f")
                else:
                    os.system(f"pkill {target}")
                    
            self.terminal.add_line(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å {target} –∑–∞–≤–µ—Ä—à–µ–Ω", 'normal')
        except Exception as e:
            self.terminal.add_line(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", 'highlight')



    def get_help(self):
        return (
            "ps - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤\n"
            "kill <PID> - –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å"
        )