from .terminal_plugin import Plugin
from telegram import Update
from telegram.ext import Updater, CommandHandler, CallbackContext
import pyautogui 
import threading
import time
import os
import platform 
from datetime import datetime
import psutil


class TelegramPlugin(Plugin):
    def __init__(self, terminal):
        super().__init__(terminal)
        self.bot_token = None
        self.chat_id = None
        self.updater = None
        self.running = False
        
        self.register_command("tgstart", "–ó–∞–ø—É—Å—Ç–∏—Ç—å Telegram –±–æ—Ç–∞", self.start_bot)
        self.register_command("tgstop", "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Telegram –±–æ—Ç–∞", self.stop_bot)

    def start_bot(self, command: str):
        
        try:
            
            try:
                from config import BOT_TOKEN, ID_CHAT
                self.bot_token = BOT_TOKEN
                self.chat_id = ID_CHAT
            except:
                self.terminal.add_line("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω config.py —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –±–æ—Ç–∞", 'error')
                return

            if self.running:
                self.terminal.add_line("ü§ñ –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω", 'normal')
                return

            self.terminal.add_line("üîÑ –ó–∞–ø—É—Å–∫–∞—é Telegram –±–æ—Ç–∞...", 'normal')
            
            
            def bot_thread():
                try:
                    self.updater = Updater(self.bot_token)
                    dp = self.updater.dispatcher
                    
                    dp.add_handler(CommandHandler("start", self.cmd_start))
                    dp.add_handler(CommandHandler("screen", self.cmd_screenshot))
                    dp.add_handler(CommandHandler("time", self.cmd_time))
                    dp.add_handler(CommandHandler("help", self.cmd_help))
                    dp.add_handler(CommandHandler("inf", self.cmd_get_system_info))
                    
                    self.updater.start_polling()
                    self.running = True
                    self.terminal.add_line("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ö–æ–º–∞–Ω–¥—ã: /start, /screen, /time", 'normal')      
                    
                    while self.running:
                        time.sleep(1)
                        
                except Exception as e:
                    self.terminal.add_line(f"‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞: {str(e)}", 'error')
                    self.running = False

            thread = threading.Thread(target=bot_thread, daemon=True)
            thread.start()
            
        except Exception as e:
            self.terminal.add_line(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", 'error')

    def stop_bot(self, command: str):
       
        if not self.running:
            self.terminal.add_line("ü§ñ –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω", 'normal')
            return
            
        try:
            if self.updater:
                self.updater.stop()
            self.running = False
            self.terminal.add_line("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", 'normal')
        except:
            self.terminal.add_line("‚ö†Ô∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å –æ—à–∏–±–∫–æ–π", 'error')
            self.running = False

    def cmd_start(self, update: Update, context: CallbackContext):
        
        update.message.reply_text(
            "ü§ñ –ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/screen - –°–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞\n"
            "/time - –í—Ä–µ–º—è —Å–∏—Å—Ç–µ–º—ã\n"
            "/help - –ü–æ–º–æ—â—å"
        )

    def cmd_screenshot(self, update: Update, context: CallbackContext):
        try:
            self.terminal.add_line('[ATTENTION] - screenshot', 'attention')
            update.message.reply_text("üì∏ –î–µ–ª–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç...")
            
            screenshot = pyautogui.screenshot()
            screenshot.save("screen.png")
            
            with open("screen.png", 'rb') as photo:
                context.bot.send_photo(
                    chat_id=update.effective_chat.id,
                    photo=photo,
                    caption="–°–∫—Ä–∏–Ω—à–æ—Ç",
                )
            
            os.remove("screen.png")
            
        except Exception as e:
            update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    def cmd_time(self, update: Update, context: CallbackContext):
        current_time = time.strftime("%Y-%m-%d %H:%M:%S")
        update.message.reply_text(f"üïí –í—Ä–µ–º—è —Å–∏—Å—Ç–µ–º—ã: {current_time}")
        
        
    def cmd_get_system_info(self, update: Update, context: CallbackContext):
       
        try:
           
            from PyQt5.QtCore import QTimer, QDateTime
            uptime = QDateTime.currentDateTime().toString("HH:mm:ss")
            uptime_str = str(uptime).split('.')[0]
            
           
            battery_info = "N/A"
            try:
                battery = psutil.sensors_battery()
                if battery:
                    battery_info = f"{battery.percent}%"
                    if battery.power_plugged:
                        battery_info += " üîå"
                    else:
                        battery_info += " üîã"
            except:
                pass
            
            
            memory = psutil.virtual_memory()
            memory_info = f"{memory.percent}% ({memory.used//1024//1024}MB/{memory.total//1024//1024}MB)"
            
            
            cpu_info = f"{psutil.cpu_percent()}%"
            
            info = [
                f"üñ•Ô∏è {platform.system()} {platform.release()}",
                f"‚è±Ô∏è Uptime: {uptime_str}",
                f"üß† CPU: {cpu_info}",
                f"üíæ Memory: {memory_info}",
                f"üîã Battery: {battery_info}",
                f"üë§ User: {os.getlogin() if hasattr(os, 'getlogin') else 'N/A'}"
            ]
            
            system_info = "\n".join(info)
            update.message.reply_text(system_info)
            
        except Exception as e:
            update.message.reply_text(f"‚ùå Error: {str(e)}")

    def cmd_help(self, update: Update, context: CallbackContext):
        update.message.reply_text(
            "ü§ñ –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n"
            "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
            "/screen - –°–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞\n"
            "/time - –í—Ä–µ–º—è —Å–∏—Å—Ç–µ–º—ã\n"
            "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
        )

    def get_help(self):
        return (
            "Telegram Bot:\n"
            "  tgstart - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
            "  tgstop  - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞\n"
            "–ö–æ–º–∞–Ω–¥—ã –≤ Telegram:\n"
            "  /start  - –ó–∞–ø—É—Å–∫\n"
            "  /screen - –°–∫—Ä–∏–Ω—à–æ—Ç\n"
            "  /time   - –í—Ä–µ–º—è —Å–∏—Å—Ç–µ–º—ã\n"
            "  /help   - –°–ø—Ä–∞–≤–∫–∞"
        )